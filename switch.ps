%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 1920 1080
%%EndComments

% switch-case library by boredzo
% Copyright 2021 Peter Hosey. See enclosed LICENSE.txt for terms.

% comparand case0 proc0 ... -> switch -> -
% Compare comparand in turn to each of a series of example (case) values. Upon a match, execute the corresponding proc.
% If a case value is null, that is the default case and a comparand that matches no other case will match that one.
/switch {
	3 dict begin
		/default_case_proc {} def
		/comparand_depth 1 def
		/fetch_comparand { comparand_depth -1 roll dup comparand_depth 1 add +1 roll } def
		/matched_anything false def

		% First, find where the comparand actually is (determine the correct comparand_depth).
		{
			fetch_comparand
			type /arraytype ne {
				exit
			} {
				/comparand_depth comparand_depth 2 add def
			} ifelse
		} loop
		% Now we can iteratively compare the comparand to each of the cases.
		% Note that if we encounter a case whose example is null, its proc must be stashed as default_case_proc and skipped to continue comparing to other non-default cases.
		{
			% Swap proc and example so we can test the example.
			exch
			dup
			% Is the example null?
			dup null eq {
				% If it is, pop the example (which we don't need for any further comparisons) and stash the proc.
				pop
				/default_case_proc exch def
			} {
				% Not null. See if it's the comparand we're looking for.
				fetch_comparand eq {
					% Yes! Exec the proc and break out of the loop.
					/matched_anything true def
					exec
					exit
				} {
					% Nope. Pop the proc and keep looking
					pop
					/comparand_depth comparand_depth 2 sub def
				} ifelse
			} ifelse
		} loop
		matched_anything not {
			default_case_proc
		} if
	end
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Test cases. You don't need these if you're copying the switch proc into your own program.

(Test 1) =
1
1 { (one) = }
2 { (two) = }
3 { (three) = }
switch
(Test 1 complete) =


(Test 2) =
2
1 { (one) = }
2 { (two) = }
3 { (three) = }
switch
(Test 2 complete) =

(Test 3) =
3
1 { (one) = }
2 { (two) = }
3 { (three) = }
switch
(Test 3 complete) =

(Test 4) =
4
1 { (one) = }
2 { (two) = }
3 { (three) = }
switch
(Test 4 complete) =

(Test 5 (default)) =
4
1 { (one) = }
2 { (two) = }
3 { (three) = }
null { (other) = }
switch
(Test 5 complete) =

(Test 6 (default only)) =
4
null { (other) = }
switch
(Test 6 complete) =

(Test 7 (no cases)) =
4
switch
(Test 7 complete) =
